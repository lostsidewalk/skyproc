
plugins {
    id 'java'
    id 'application'
    id 'java-library'
    id 'maven-publish'
}

group = 'com.lostsidewalk'
version = '0.2'

repositories {
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.0.1-jre'

    // https://mvnrepository.com/artifact/io.airlift/aircompressor
    implementation 'io.airlift:aircompressor:0.21'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.0-alpha6'

    api group: 'com.lostsidewalk', name: 'lev', version: '1.2'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
}

application {
    mainClassName = 'skyproc.App'
}

test {
    useJUnitPlatform()
}

repositories {
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/meharris-bnr/lev")
        credentials {
            username = project.findProperty("repo.user") ?: System.getenv("SKYPROC_REPO_USER")
            password = project.findProperty("repo.token") ?: System.getenv("SKYPROC_REPO_TOKEN")
        }
    }
}

publishing {
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri("https://maven.pkg.github.com/meharris-bnr/skyproc")
            credentials {
                username = project.findProperty("publishing.user") ?: System.getenv("SKYPROC_PUBLISHING_USER")
                password = project.findProperty("publishing.token") ?: System.getenv("SKYPROC_PUBLISHING_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}
